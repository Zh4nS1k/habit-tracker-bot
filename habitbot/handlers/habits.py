from __future__ import annotations

import re
from typing import Dict, List
from zoneinfo import ZoneInfo

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from ..config import get_settings
from ..keyboards import (
    habit_details_keyboard,
    habits_inline_keyboard,
    main_menu_keyboard,
    reminder_menu_keyboard,
)
from ..services.habits import (
    archive_habit,
    completions_for_habit,
    get_habit,
    get_user_settings,
    list_active_habits,
    update_reminder,
)
from ..states import ReminderTimeUpdate
from ..utils.dates import format_display, parse_iso


router = Router(name="habits")
settings = get_settings()


async def _user_zoneinfo(user_id: int) -> ZoneInfo:
    settings_doc = await get_user_settings(user_id)
    tz_name = settings_doc.get("timezone", settings.timezone)
    return ZoneInfo(tz_name)


def _describe_repeat(habit: Dict) -> str:
    repeat = habit.get("repeat", {})
    mode = repeat.get("mode")
    if mode == "daily":
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    if mode == "weekdays":
        labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        days = repeat.get("weekdays", [])
        if not days:
            return "–ü–æ –¥–Ω—è–º: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        return "–ü–æ –¥–Ω—è–º: " + ", ".join(labels[d] for d in days)
    if mode == "weekly":
        labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day = repeat.get("week_day", 0)
        return f"–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ({labels[day]})"
    if mode == "monthly":
        return f"–†–∞–∑ –≤ –º–µ—Å—è—Ü ({repeat.get('month_day', 1)} —á–∏—Å–ª–æ)"
    if mode == "interval":
        return f"–†–∞–∑ –≤ {repeat.get('interval_days', 1)} –¥–Ω."
    return "–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"


@router.message(F.text == "üìÖ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def habits_list(message: Message) -> None:
    habits = await list_active_habits(message.from_user.id)
    if not habits:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É¬ª.",
            reply_markup=main_menu_keyboard(),
        )
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=habits_inline_keyboard(habits, "view"),
    )


@router.callback_query(F.data.startswith("habit:view:"))
async def habit_view(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—ã—á–∫—É.")
        return
    tz = await _user_zoneinfo(callback.from_user.id)
    start = format_display(parse_iso(habit["start_date"]))
    target = habit.get("target_date")
    target_text = format_display(parse_iso(target)) if target else "–ë–µ–∑ —Å—Ä–æ–∫–∞"
    reminder = habit.get("reminder", {})
    reminder_text = "–í—ã–∫–ª—é—á–µ–Ω–æ"
    if reminder.get("enabled"):
        reminder_text = f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {reminder.get('time', settings.default_reminder_time)}"

    last_done = habit.get("last_completed_on")
    if last_done:
        last_done = format_display(parse_iso(last_done))
    else:
        last_done = "–µ—â—ë –Ω–µ—Ç"

    text = (
        f"{habit.get('emoji', '‚úÖ')} *{habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')}*\n"
        f"{habit.get('description', '‚Äî')}\n\n"
        f"*–°—Ç–∞—Ä—Ç:* {start}\n"
        f"*–¶–µ–ª—å:* {target_text}\n"
        f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* {_describe_repeat(habit)}\n"
        f"*–°—Ç—Ä–∏–∫:* {habit.get('current_streak', 0)} (–ª—É—á—à–∏–π {habit.get('best_streak', 0)})\n"
        f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* {last_done}\n"
        f"*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* {reminder_text}"
    )
    await callback.message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=habit_details_keyboard(habit),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:reminder:menu:"))
async def habit_reminder_menu(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=reminder_menu_keyboard(habit))
    await callback.answer()


@router.callback_query(F.data.startswith("habit:reminder:toggle:"))
async def habit_reminder_toggle(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    reminder = habit.get("reminder", {})
    enabled = not reminder.get("enabled", False)
    updated = await update_reminder(habit_id, callback.from_user.id, enabled=enabled)
    if updated:
        msg = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if enabled else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
        await callback.message.edit_reply_markup(reply_markup=reminder_menu_keyboard(updated))
        await callback.answer(msg)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("habit:reminder:time:"))
async def habit_reminder_time(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.set_state(ReminderTimeUpdate.waiting_time)
    await state.update_data(habit_id=habit_id)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ß–ß:–ú–ú).")
    await callback.answer()


@router.message(ReminderTimeUpdate.waiting_time)
async def habit_reminder_time_set(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", text):
        await message.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú, –ø—Ä–∏–º–µ—Ä 09:30.")
        return
    data = await state.get_data()
    habit_id = data.get("habit_id")
    await update_reminder(habit_id, message.from_user.id, reminder_time=text, enabled=True)
    habit = await get_habit(habit_id, message.from_user.id)
    await state.clear()
    if habit:
        await message.answer(
            f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text}.",
            reply_markup=reminder_menu_keyboard(habit),
        )
    else:
        await message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu_keyboard())


@router.callback_query(F.data.startswith("habit:archive:"))
async def habit_archive(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    success = await archive_habit(habit_id, callback.from_user.id)
    if success:
        await callback.message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", reply_markup=main_menu_keyboard())
        await callback.answer("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.")


@router.callback_query(F.data.startswith("habit:stats:"))
async def habit_stats(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—ã—á–∫—É.")
        return
    completions = await completions_for_habit(habit["_id"])
    if not completions:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫ –ø–æ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ.", reply_markup=main_menu_keyboard())
        await callback.answer()
        return
    last_entries = completions[-10:]
    formatted = [format_display(parse_iso(day)) for day in last_entries]
    stats_text = (
        f"{habit.get('emoji', '‚úÖ')} *{habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')}*\n"
        f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {len(completions)}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {habit.get('current_streak', 0)} / –õ—É—á—à–∏–π: {habit.get('best_streak', 0)}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏: " + ", ".join(formatted)
    )
    await callback.message.answer(stats_text, parse_mode="Markdown", reply_markup=habit_details_keyboard(habit))
    await callback.answer()
