from __future__ import annotations

import re
from typing import Dict, List
from zoneinfo import ZoneInfo

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from ..config import get_settings
from ..keyboards import (
    delete_confirmation_keyboard,
    habit_details_keyboard,
    habit_edit_keyboard,
    emoji_keyboard,
    habits_inline_keyboard,
    main_menu_keyboard,
    navigation_keyboard,
    reminder_menu_keyboard,
    with_navigation,
)
from ..services.habits import (
    archive_habit,
    completions_for_habit,
    delete_habit_permanently,
    get_habit,
    get_user_settings,
    list_active_habits,
    update_habit_fields,
    update_reminder,
)
from ..states import EditHabit, ReminderTimeUpdate
from ..utils.dates import format_display, parse_iso


router = Router(name="habits")
settings = get_settings()

CANCEL_KEYWORDS = {"–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø"}


def _is_cancel(text: str | None) -> bool:
    return bool(text) and text.strip().lower() in CANCEL_KEYWORDS


def _habit_details_text(habit: Dict) -> str:
    start = format_display(parse_iso(habit["start_date"]))
    target = habit.get("target_date")
    target_text = format_display(parse_iso(target)) if target else "–ë–µ–∑ —Å—Ä–æ–∫–∞"

    reminder = habit.get("reminder", {})
    reminder_text = "–í—ã–∫–ª—é—á–µ–Ω–æ"
    if reminder.get("enabled"):
        reminder_text = f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {reminder.get('time', settings.default_reminder_time)}"

    last_done = habit.get("last_completed_on")
    if last_done:
        last_done = format_display(parse_iso(last_done))
    else:
        last_done = "–µ—â—ë –Ω–µ—Ç"

    description = habit.get("description", "").strip() or "‚Äî"

    return (
        f"{habit.get('emoji', '‚úÖ')} *{habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')}*\n"
        f"{description}\n\n"
        f"*–°—Ç–∞—Ä—Ç:* {start}\n"
        f"*–¶–µ–ª—å:* {target_text}\n"
        f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* {_describe_repeat(habit)}\n"
        f"*–°—Ç—Ä–∏–∫:* {habit.get('current_streak', 0)} (–ª—É—á—à–∏–π {habit.get('best_streak', 0)})\n"
        f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* {last_done}\n"
        f"*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* {reminder_text}"
    )


async def _send_habit_details(
    message: Message,
    habit_id: str,
    user_id: int,
    *,
    habit: Dict | None = None,
    notice: str | None = None,
) -> None:
    habit_doc = habit or await get_habit(habit_id, user_id)
    if not habit_doc:
        await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return
    text = _habit_details_text(habit_doc)
    if notice:
        text = f"{notice}\n\n{text}"
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=habit_details_keyboard(habit_doc),
    )


async def _send_edit_menu(
    message: Message,
    habit_id: str,
    user_id: int,
    *,
    habit: Dict | None = None,
    notice: str | None = None,
) -> None:
    habit_doc = habit or await get_habit(habit_id, user_id)
    if not habit_doc:
        await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return
    text = _habit_details_text(habit_doc)
    if notice:
        text = f"{notice}\n\n{text}"
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=habit_edit_keyboard(habit_id),
    )


async def _user_zoneinfo(user_id: int) -> ZoneInfo:
    settings_doc = await get_user_settings(user_id)
    tz_name = settings_doc.get("timezone", settings.timezone)
    return ZoneInfo(tz_name)


def _describe_repeat(habit: Dict) -> str:
    repeat = habit.get("repeat", {})
    mode = repeat.get("mode")
    if mode == "daily":
        return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    if mode == "weekdays":
        labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        days = repeat.get("weekdays", [])
        if not days:
            return "–ü–æ –¥–Ω—è–º: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        return "–ü–æ –¥–Ω—è–º: " + ", ".join(labels[d] for d in days)
    if mode == "weekly":
        labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day = repeat.get("week_day", 0)
        return f"–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ({labels[day]})"
    if mode == "monthly":
        return f"–†–∞–∑ –≤ –º–µ—Å—è—Ü ({repeat.get('month_day', 1)} —á–∏—Å–ª–æ)"
    if mode == "interval":
        return f"–†–∞–∑ –≤ {repeat.get('interval_days', 1)} –¥–Ω."
    return "–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"


@router.message(F.text == "üìÖ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def habits_list(message: Message) -> None:
    habits = await list_active_habits(message.from_user.id)
    if not habits:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É¬ª.",
            reply_markup=main_menu_keyboard(),
        )
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=habits_inline_keyboard(habits, "view"),
    )


@router.callback_query(F.data.startswith("habit:view:"))
async def habit_view(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 2)[2]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—ã—á–∫—É.")
        return
    await state.clear()
    await _send_habit_details(callback.message, habit_id, callback.from_user.id, habit=habit)
    await callback.answer()


@router.callback_query(F.data.startswith("habit:edit:menu:"))
async def habit_edit_menu(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.clear()
    await _send_edit_menu(
        callback.message,
        habit_id,
        callback.from_user.id,
        habit=habit,
        notice="–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:edit:name:"))
async def habit_edit_name(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.set_state(EditHabit.waiting_name)
    await state.update_data(habit_id=habit_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
        reply_markup=navigation_keyboard(
            cancel_cb=f"habit:view:{habit_id}",
            back_cb=f"habit:edit:menu:{habit_id}",
        ),
    )
    await callback.answer()


@router.message(EditHabit.waiting_name)
async def habit_edit_name_set(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    habit_id = data.get("habit_id")
    if not habit_id:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞.", reply_markup=main_menu_keyboard())
        return
    if _is_cancel(message.text):
        await state.clear()
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            notice="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
        return
    new_name = (message.text or "").strip()
    if len(new_name) < 2:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=navigation_keyboard(
                cancel_cb=f"habit:view:{habit_id}",
                back_cb=f"habit:edit:menu:{habit_id}",
            ),
        )
        return
    updated = await update_habit_fields(habit_id, message.from_user.id, name=new_name)
    habit = await get_habit(habit_id, message.from_user.id)
    await state.clear()
    if updated and habit:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
        )
    else:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        )


@router.callback_query(F.data.startswith("habit:edit:description:"))
async def habit_edit_description(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.set_state(EditHabit.waiting_description)
    await state.update_data(habit_id=habit_id)
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª. –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.",
        reply_markup=navigation_keyboard(
            cancel_cb=f"habit:view:{habit_id}",
            back_cb=f"habit:edit:menu:{habit_id}",
        ),
    )
    await callback.answer()


@router.message(EditHabit.waiting_description)
async def habit_edit_description_set(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    habit_id = data.get("habit_id")
    if not habit_id:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞.", reply_markup=main_menu_keyboard())
        return
    if _is_cancel(message.text):
        await state.clear()
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            notice="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
        return
    new_description = (message.text or "").strip()
    updated = await update_habit_fields(
        habit_id,
        message.from_user.id,
        description=new_description,
    )
    habit = await get_habit(habit_id, message.from_user.id)
    await state.clear()
    if updated and habit is not None:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
        )
    else:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
        )


@router.callback_query(F.data.startswith("habit:edit:emoji:"))
async def habit_edit_emoji(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.set_state(EditHabit.waiting_emoji)
    await state.update_data(habit_id=habit_id)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=with_navigation(
            emoji_keyboard(prefix=f"habit:emoji:{habit_id}"),
            cancel_cb=f"habit:view:{habit_id}",
            back_cb=f"habit:edit:menu:{habit_id}",
        ),
    )
    await callback.answer()


@router.callback_query(EditHabit.waiting_emoji, F.data.startswith("habit:emoji:"))
async def habit_edit_emoji_pick(callback: CallbackQuery, state: FSMContext) -> None:
    parts = callback.data.split(":", 3)
    if len(parts) < 4:
        await callback.answer()
        return
    _, _, habit_id, value = parts
    if value == "custom":
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=navigation_keyboard(
                cancel_cb=f"habit:view:{habit_id}",
                back_cb=f"habit:edit:menu:{habit_id}",
            ),
        )
        await callback.answer()
        return
    emoji_value = value[:2]
    updated = await update_habit_fields(habit_id, callback.from_user.id, emoji=emoji_value)
    habit = await get_habit(habit_id, callback.from_user.id)
    await state.clear()
    if updated and habit:
        await _send_edit_menu(
            callback.message,
            habit_id,
            callback.from_user.id,
            habit=habit,
            notice="–≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
        )
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await _send_edit_menu(
            callback.message,
            habit_id,
            callback.from_user.id,
            habit=habit,
            notice="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏.",
        )
        await callback.answer("–û—à–∏–±–∫–∞")


@router.message(EditHabit.waiting_emoji)
async def habit_edit_emoji_manual(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    habit_id = data.get("habit_id")
    if not habit_id:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞.", reply_markup=main_menu_keyboard())
        return
    if _is_cancel(message.text):
        await state.clear()
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            notice="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
        return
    value = (message.text or "").strip()
    if not value:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª.",
            reply_markup=navigation_keyboard(
                cancel_cb=f"habit:view:{habit_id}",
                back_cb=f"habit:edit:menu:{habit_id}",
            ),
        )
        return
    emoji_value = value[:2]
    updated = await update_habit_fields(habit_id, message.from_user.id, emoji=emoji_value)
    habit = await get_habit(habit_id, message.from_user.id)
    await state.clear()
    if updated and habit:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
        )
    else:
        await _send_edit_menu(
            message,
            habit_id,
            message.from_user.id,
            habit=habit,
            notice="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏.",
        )


@router.callback_query(F.data.startswith("habit:reminder:menu:"))
async def habit_reminder_menu(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=reminder_menu_keyboard(habit))
    await callback.answer()


@router.callback_query(F.data.startswith("habit:reminder:toggle:"))
async def habit_reminder_toggle(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    reminder = habit.get("reminder", {})
    enabled = not reminder.get("enabled", False)
    updated = await update_reminder(habit_id, callback.from_user.id, enabled=enabled)
    if updated:
        msg = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if enabled else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
        await callback.message.edit_reply_markup(reply_markup=reminder_menu_keyboard(updated))
        await callback.answer(msg)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("habit:reminder:time:"))
async def habit_reminder_time(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await state.set_state(ReminderTimeUpdate.waiting_time)
    await state.update_data(habit_id=habit_id)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ß–ß:–ú–ú).")
    await callback.answer()


@router.message(ReminderTimeUpdate.waiting_time)
async def habit_reminder_time_set(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", text):
        await message.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú, –ø—Ä–∏–º–µ—Ä 09:30.")
        return
    data = await state.get_data()
    habit_id = data.get("habit_id")
    await update_reminder(habit_id, message.from_user.id, reminder_time=text, enabled=True)
    habit = await get_habit(habit_id, message.from_user.id)
    await state.clear()
    if habit:
        await message.answer(
            f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text}.",
            reply_markup=reminder_menu_keyboard(habit),
        )
    else:
        await message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu_keyboard())


@router.callback_query(
    F.data.startswith("habit:delete:") & ~F.data.startswith("habit:delete:confirm:")
)
async def habit_delete(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await callback.message.answer(
        "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=delete_confirmation_keyboard(habit_id),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("habit:delete:confirm:"))
async def habit_delete_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    habit_id = callback.data.split(":", 3)[3]
    success = await delete_habit_permanently(habit_id, callback.from_user.id)
    await state.clear()
    if success:
        await callback.message.answer(
            "–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
            reply_markup=main_menu_keyboard(),
        )
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.")


@router.callback_query(F.data.startswith("habit:archive:"))
async def habit_archive(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    success = await archive_habit(habit_id, callback.from_user.id)
    if success:
        await callback.message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", reply_markup=main_menu_keyboard())
        await callback.answer("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.")


@router.callback_query(F.data.startswith("habit:stats:"))
async def habit_stats(callback: CallbackQuery) -> None:
    habit_id = callback.data.split(":", 2)[2]
    habit = await get_habit(habit_id, callback.from_user.id)
    if not habit:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—ã—á–∫—É.")
        return
    completions = await completions_for_habit(habit["_id"])
    if not completions:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫ –ø–æ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ.", reply_markup=main_menu_keyboard())
        await callback.answer()
        return
    last_entries = completions[-10:]
    formatted = [format_display(parse_iso(day)) for day in last_entries]
    stats_text = (
        f"{habit.get('emoji', '‚úÖ')} *{habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')}*\n"
        f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {len(completions)}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {habit.get('current_streak', 0)} / –õ—É—á—à–∏–π: {habit.get('best_streak', 0)}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏: " + ", ".join(formatted)
    )
    await callback.message.answer(stats_text, parse_mode="Markdown", reply_markup=habit_details_keyboard(habit))
    await callback.answer()
