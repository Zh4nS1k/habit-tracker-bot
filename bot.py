import asyncio
import logging
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
import logging
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

DB_PATH = "habits.db"


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS habits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                created_at DATE
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                habit_id INTEGER,
                date DATE,
                done BOOLEAN,
                FOREIGN KEY (habit_id) REFERENCES habits(id)
            )
        """)
        await db.commit()


# === CRUD –û–ü–ï–†–ê–¶–ò–ò ===
async def add_habit(user_id, name):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO habits (user_id, name, created_at) VALUES (?, ?, ?)",
                         (user_id, name, datetime.now().date()))
        await db.commit()

async def get_habits(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, name FROM habits WHERE user_id = ?", (user_id,))
        return await cursor.fetchall()

async def delete_habit(habit_id, user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM habits WHERE id=? AND user_id=?", (habit_id, user_id))
        await db.commit()

async def mark_done(habit_id, done=True):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO records (habit_id, date, done) VALUES (?, ?, ?)",
                         (habit_id, datetime.now().date(), done))
        await db.commit()

async def get_stats(user_id, days=7):
    async with aiosqlite.connect(DB_PATH) as db:
        since = datetime.now().date() - timedelta(days=days)
        cursor = await db.execute("""
            SELECT h.name, COUNT(r.id) AS total_done
            FROM habits h
            LEFT JOIN records r ON h.id = r.habit_id AND r.done=1 AND r.date>=?
            WHERE h.user_id = ?
            GROUP BY h.id
        """, (since, user_id))
        return await cursor.fetchall()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫.\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
                         "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                         "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
                         "/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
                         "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")

@dp.message(Command("add"))
async def add_cmd(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")

    @dp.message()
    async def get_name(msg: types.Message):
        await add_habit(msg.from_user.id, msg.text)
        await msg.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{msg.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        dp.message.unregister(get_name)

@dp.message(Command("list"))
async def list_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    text = "\n".join([f"{hid}. {name}" for hid, name in habits])
    await message.answer(f"üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{text}")

@dp.message(Command("delete"))
async def delete_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    text = "\n".join([f"{hid}. {name}" for hid, name in habits])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{text}")

    @dp.message()
    async def get_id(msg: types.Message):
        try:
            await delete_habit(int(msg.text), msg.from_user.id)
            await msg.answer("üóë –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        except:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID.")
        dp.message.unregister(get_id)

@dp.message(Command("done"))
async def done_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
        return
    text = "\n".join([f"{hid}. {name}" for hid, name in habits])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏:\n{text}")

    @dp.message()
    async def mark(msg: types.Message):
        try:
            await mark_done(int(msg.text))
            await msg.answer("üéØ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        except:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID.")
        dp.message.unregister(mark)

@dp.message(Command("stats"))
async def stats_cmd(message: types.Message):
    stats = await get_stats(message.from_user.id, 7)
    if not stats:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    text = "\n".join([f"{name}: {done} —Ä–∞–∑(–∞)" for name, done in stats])
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\n{text}")


# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
async def send_reminders():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT DISTINCT user_id FROM habits")
        users = await cursor.fetchall()
    for (user_id,) in users:
        await bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")

def setup_scheduler():
    scheduler.add_job(send_reminders, CronTrigger(hour=20, minute=0))  # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 20:00
    scheduler.start()


# === MAIN ===
async def main():
    await init_db()
    setup_scheduler()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())