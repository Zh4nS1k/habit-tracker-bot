# bot.py
import asyncio
import logging
import os
import aiosqlite
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from dotenv import load_dotenv

# ================= ENV & LOGGING =================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s"
)
logger = logging.getLogger("habitbot")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# ================= SINGLE-INSTANCE LOCK =================
LOCK_FILE = "habitbot.pid"

def acquire_lock_or_exit():
    """–ü—Ä–æ—Å—Ç–æ–π PID-–ª–æ–∫: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ –Ω–∞ —Ç–æ–π –∂–µ –º–∞—à–∏–Ω–µ."""
    if os.path.exists(LOCK_FILE):
        raise SystemExit(
            f"–ü–æ—Ö–æ–∂–µ, –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–µ—Å—Ç—å {LOCK_FILE}). "
            f"–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞."
        )
    with open(LOCK_FILE, "w", encoding="utf-8") as f:
        f.write(str(os.getpid()))

def release_lock():
    try:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
    except Exception:
        pass

# ================= AIROGRAM & SCHEDULER =================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–∫–∞–ª—å–Ω–∞—è TZ ‚Äî –ê–ª–º–∞—Ç—ã
KZ_TZ = ZoneInfo("Asia/Almaty")
scheduler = AsyncIOScheduler(timezone=KZ_TZ)

DB_PATH = "habits.db"

# ================= FSM STATES =================
class HabitStates(StatesGroup):
    waiting_for_habit_name = State()
    waiting_for_habit_delete = State()
    waiting_for_habit_mark = State()

# ================= KEYBOARDS =================
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"), KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def get_habits_keyboard(habits, action_type="mark"):
    """
    habits: [(id, name, color), ...]
    """
    keyboard = []
    for habit_id, name, color in habits:
        cb = f"{'mark' if action_type=='mark' else 'delete'}_{habit_id}"
        keyboard.append([InlineKeyboardButton(text=f"{color} {name}", callback_data=cb)])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_button():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )

# ================= DB INIT =================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS habits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                created_at DATE,
                color TEXT DEFAULT 'üîµ'
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                habit_id INTEGER,
                date DATE,
                done BOOLEAN,
                FOREIGN KEY (habit_id) REFERENCES habits(id)
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                reminder_time TIME DEFAULT '20:00'
            )
        """)
        await db.commit()

# ================= CRUD =================
async def add_habit(user_id, name, color="üîµ"):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO habits (user_id, name, created_at, color) VALUES (?, ?, ?, ?)",
            (user_id, name, datetime.now(KZ_TZ).date(), color)
        )
        await db.commit()

async def get_habits(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, name, color FROM habits WHERE user_id = ? ORDER BY created_at DESC",
            (user_id,)
        )
        return await cur.fetchall()

async def delete_habit(habit_id, user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM habits WHERE id=? AND user_id=?", (habit_id, user_id))
        await db.execute("DELETE FROM records WHERE habit_id=?", (habit_id,))
        await db.commit()

async def mark_done(habit_id, done=True):
    today = datetime.now(KZ_TZ).date()
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM records WHERE habit_id=? AND date=?", (habit_id, today))
        existing = await cur.fetchone()
        if existing:
            await db.execute("UPDATE records SET done=? WHERE id=?", (done, existing[0]))
        else:
            await db.execute(
                "INSERT INTO records (habit_id, date, done) VALUES (?, ?, ?)",
                (habit_id, today, done)
            )
        await db.commit()

async def get_today_progress(user_id):
    today = datetime.now(KZ_TZ).date()
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT h.id, h.name, h.color, r.done 
            FROM habits h 
            LEFT JOIN records r ON h.id = r.habit_id AND r.date = ? 
            WHERE h.user_id = ?
            ORDER BY h.created_at DESC
        """, (today, user_id))
        return await cur.fetchall()

async def get_stats(user_id, days=7):
    since = datetime.now(KZ_TZ).date() - timedelta(days=days)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT h.name, h.color, COUNT(r.id) AS total_done
            FROM habits h
            LEFT JOIN records r ON h.id = r.habit_id AND r.done=1 AND r.date>=?
            WHERE h.user_id = ?
            GROUP BY h.id
            ORDER BY total_done DESC
        """, (since, user_id))
        return await cur.fetchall()

async def get_streak(user_id, habit_id=None):
    async with aiosqlite.connect(DB_PATH) as db:
        if habit_id:
            cur = await db.execute("""
                SELECT date FROM records 
                WHERE habit_id=? AND done=1 
                ORDER BY date DESC
            """, (habit_id,))
        else:
            cur = await db.execute("""
                SELECT r.date FROM records r
                JOIN habits h ON r.habit_id = h.id
                WHERE h.user_id=? AND r.done=1
                ORDER BY r.date DESC
            """, (user_id,))
        records = await cur.fetchall()

    if not records:
        return 0

    streak = 0
    current_date = datetime.now(KZ_TZ).date()
    for (date_value,) in records:
        record_date = (
            datetime.strptime(date_value, "%Y-%m-%d").date()
            if isinstance(date_value, str) else date_value
        )
        if record_date == (current_date - timedelta(days=streak)):
            streak += 1
        else:
            break
    return streak

# ================= HANDLERS =================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    welcome_text = (
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìã –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏\n"
        "‚Ä¢ ‚úÖ –û—Ç–º–µ—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    help_text = (
        "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "**üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏** ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "**‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É** ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "**‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "**üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É** ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –Ω–∞—á–Ω–∏—Ç–µ —Å 3‚Äì5 –ø—Ä–∏–≤—ã—á–µ–∫."
    )
    await message.answer(help_text, reply_markup=get_main_menu())

@dp.message(F.text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def list_habits_cmd(message: types.Message):
    habits = await get_today_progress(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!", reply_markup=get_main_menu())
        return

    today = datetime.now(KZ_TZ).strftime("%d.%m.%Y")
    text = f"üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ {today}:**\n\n"

    completed = 0
    for habit_id, name, color, done in habits:
        status = "‚úÖ" if done else "‚è≥"
        text += f"{color} {name} ‚Äî {status}\n"
        if done:
            completed += 1

    total = len(habits)
    percentage = (completed / total) * 100 if total > 0 else 0
    text += f"\nüéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {completed}/{total} ({percentage:.1f}%)"

    streak = await get_streak(message.from_user.id)
    if streak > 0:
        text += f"\nüî• **–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:** {streak} –¥–Ω."

    await message.answer(text, reply_markup=get_main_menu())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def add_habit_cmd(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –ß—Ç–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(HabitStates.waiting_for_habit_name)

@dp.message(HabitStates.waiting_for_habit_name)
async def process_habit_name(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return

    habit_name = (message.text or "").strip()
    if not habit_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (1‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    if len(habit_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await add_habit(message.from_user.id, habit_name)
    await state.clear()
    await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())

@dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def mark_done_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!", reply_markup=get_main_menu())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=get_habits_keyboard(habits, "mark"))

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def delete_habit_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_habits_keyboard(habits, "delete"))

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_cmd(message: types.Message):
    stats = await get_stats(message.from_user.id, 7)
    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏!", reply_markup=get_main_menu())
        return

    text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:**\n\n"
    total_done = 0
    for name, color, done_count in stats:
        text += f"{color} {name}: {done_count} —Ä–∞–∑\n"
        total_done += done_count

    streak = await get_streak(message.from_user.id)
    text += f"\nüî• **–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:** {streak} –¥–Ω."
    text += f"\nüéØ **–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {total_done} —Ä–∞–∑"

    await message.answer(text, reply_markup=get_main_menu())

# ================= CALLBACKS =================
@dp.callback_query(F.data.startswith("mark_"))
async def mark_habit_callback(callback: types.CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    await mark_done(habit_id, True)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM habits WHERE id=?", (habit_id,))
        row = await cur.fetchone()
    habit_name = row[0] if row else "–ü—Ä–∏–≤—ã—á–∫–∞"
    await callback.message.edit_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_habit_callback(callback: types.CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM habits WHERE id=?", (habit_id,))
        row = await cur.fetchone()
    habit_name = row[0] if row else "–ü—Ä–∏–≤—ã—á–∫–∞"
    await delete_habit(habit_id, callback.from_user.id)
    await callback.message.edit_text(f"üóë –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# ================= REMINDERS =================
async def send_reminders():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT DISTINCT user_id FROM habits")
        users = await cur.fetchall()

    for (user_id,) in users:
        try:
            today_progress = await get_today_progress(user_id)
            unmarked = [habit for habit in today_progress if not habit[3]]
            if unmarked:
                reminder_text = "üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                for habit in unmarked[:5]:
                    reminder_text += f"‚Ä¢ {habit[2]} {habit[1]}\n"  # color + name
                if len(unmarked) > 5:
                    reminder_text += f"‚Ä¢ ... –∏ –µ—â—ë {len(unmarked) - 5} –ø—Ä–∏–≤—ã—á–µ–∫\n"
                reminder_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª"
                await bot.send_message(user_id, reminder_text, reply_markup=get_main_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def setup_scheduler():
    # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ ID + replace_existing ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    scheduler.add_job(
        send_reminders,
        CronTrigger(hour=20, minute=0),
        id="reminder_20_00",
        replace_existing=True,
        coalesce=True,
        misfire_grace_time=300
    )
    scheduler.add_job(
        send_reminders,
        CronTrigger(hour=9, minute=0),
        id="reminder_09_00",
        replace_existing=True,
        coalesce=True,
        misfire_grace_time=300
    )
    scheduler.start()

# ================= SHUTDOWN =================
async def on_shutdown():
    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≥–∞—Å–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    try:
        scheduler.shutdown(wait=False)
    except Exception:
        pass
    try:
        await bot.session.close()
    except Exception:
        pass
    release_lock()
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
# === DB MIGRATION (–¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö) ===
async def migrate_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –£–∑–Ω–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –≤ habits
        cur = await db.execute("PRAGMA table_info(habits)")
        cols = [row[1] for row in await cur.fetchall()]  # row[1] = name

        # color
        if "color" not in cols:
            await db.execute("ALTER TABLE habits ADD COLUMN color TEXT DEFAULT 'üîµ'")
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ NULL
            await db.execute("UPDATE habits SET color='üîµ' WHERE color IS NULL")

        # created_at (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ –±–µ–∑ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏)
        if "created_at" not in cols:
            await db.execute("ALTER TABLE habits ADD COLUMN created_at DATE")
            # –∑–∞–ø–æ–ª–Ω–∏–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π, —á—Ç–æ–±—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–∞–¥–∞–ª–∞
            from datetime import datetime
            from zoneinfo import ZoneInfo
            KZ_TZ = ZoneInfo("Asia/Almaty")
            today = datetime.now(KZ_TZ).date().isoformat()
            await db.execute("UPDATE habits SET created_at=?", (today,))

        await db.commit()
    

# ================= MAIN =================
async def main():
    acquire_lock_or_exit()
    await init_db()

    await migrate_db()  # <-- –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

    

    # –í–∞–∂–Ω–æ: —Å–Ω–∏–º–∞–µ–º webhook –∏ —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥–∏, –∏–Ω–∞—á–µ –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å polling
    await bot.delete_webhook(drop_pending_updates=True)

    setup_scheduler()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # aiogram v3: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # –î–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã (–∏—Å—á–µ–∑–Ω—É—Ç unclosed session / SSL –æ—à–∏–±–∫–∏)
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except SystemExit as e:
        logger.error(str(e))
    except KeyboardInterrupt:
        pass
    finally:
        release_lock()
