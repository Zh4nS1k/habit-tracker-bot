# bot.py
import asyncio
import logging
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
from bson import ObjectId

# ================= ENV & LOGGING =================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")  # mongodb+srv://user:pass@cluster/...
TZ_NAME = os.getenv("TZ", "Asia/Almaty")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not MONGO_URI:
    raise RuntimeError("MONGO_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s"
)
logger = logging.getLogger("habitbot")

KZ_TZ = ZoneInfo(TZ_NAME)

# ================= AIROGRAM & SCHEDULER =================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=KZ_TZ)

# ================= MONGO =================
mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["habit_tracker_bot"]
col_habits = db["habits"]
col_records = db["records"]
col_settings = db["user_settings"]


async def create_indexes():
    # habits: —á–∞—Å—Ç—ã–µ –≤—ã–±–æ—Ä–∫–∏ –ø–æ user_id, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ created_at
    await col_habits.create_index([("user_id", 1), ("created_at", -1)])
    # records: —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤ –¥–µ–Ω—å –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ
    await col_records.create_index([("habit_id", 1), ("date", 1)], unique=True)
    # user_settings: –ø–æ user_id
    await col_settings.create_index([("user_id", 1)], unique=True)


# ================= FSM STATES =================
class HabitStates(StatesGroup):
    waiting_for_habit_name = State()


# ================= KEYBOARDS =================
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"), KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )


def get_habits_keyboard(habits, action_type="mark"):
    """
    habits: list[dict] —Å –ø–æ–ª—è–º–∏ _id, name, color
    """
    keyboard = []
    for h in habits:
        hid = str(h["_id"])
        name = h.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        color = h.get("color", "üîµ")
        cb = f"{'mark' if action_type == 'mark' else 'delete'}_{hid}"
        keyboard.append([InlineKeyboardButton(text=f"{color} {name}", callback_data=cb)])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ================= DATA ACCESS =================
def today_kz_date_str() -> str:
    return datetime.now(KZ_TZ).date().isoformat()


async def add_habit(user_id: int, name: str, color: str = "üîµ"):
    doc = {
        "user_id": user_id,
        "name": name,
        "created_at": datetime.now(KZ_TZ),
        "color": color,
    }
    await col_habits.insert_one(doc)


async def get_habits(user_id: int):
    cursor = col_habits.find({"user_id": user_id}).sort("created_at", -1)
    return await cursor.to_list(length=None)


async def delete_habit(habit_id: str, user_id: int):
    # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await col_habits.delete_one({"_id": ObjectId(habit_id), "user_id": user_id})
    await col_records.delete_many({"habit_id": habit_id})


async def mark_done(habit_id: str, done: bool = True):
    dstr = today_kz_date_str()
    await col_records.update_one(
        {"habit_id": habit_id, "date": dstr},
        {"$set": {"done": done}},
        upsert=True
    )


async def get_today_progress(user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (habit_id, name, color, done: bool) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    dstr = today_kz_date_str()
    habits = await get_habits(user_id)
    result = []
    for h in habits:
        hid = str(h["_id"])
        rec = await col_records.find_one({"habit_id": hid, "date": dstr})
        result.append((hid, h.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), h.get("color", "üîµ"), bool(rec and rec.get("done"))))
    return result


async def get_stats(user_id: int, days: int = 7):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (name, color, total_done) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ days
    """
    since = datetime.now(KZ_TZ).date() - timedelta(days=days)
    since_str = since.isoformat()
    # —Å–æ–±–µ—Ä—ë–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    habits = await get_habits(user_id)
    id2meta = {str(h["_id"]): (h.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), h.get("color", "üîµ")) for h in habits}
    # –ø–æ—Å—á–∏—Ç–∞–µ–º done –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–µ
    pipeline = [
        {"$match": {"habit_id": {"$in": list(id2meta.keys())}, "date": {"$gte": since_str}, "done": True}},
        {"$group": {"_id": "$habit_id", "cnt": {"$sum": 1}}},
        {"$sort": {"cnt": -1}},
    ]
    agg = await col_records.aggregate(pipeline).to_list(length=None)
    # —Å–æ–±–µ—Ä—ë–º –æ—Ç–≤–µ—Ç
    out = []
    for g in agg:
        hid = g["_id"]
        cnt = g["cnt"]
        name, color = id2meta.get(hid, ("(—É–¥–∞–ª–µ–Ω–æ)", "üîµ"))
        out.append((name, color, cnt))
    # –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–≤—ã—á–∫–∏ —Å –Ω—É–ª—ë–º
    used = {g["_id"] for g in agg}
    for hid, (name, color) in id2meta.items():
        if hid not in used:
            out.append((name, color, 0))
    # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    out.sort(key=lambda x: x[2], reverse=True)
    return out


async def get_streak(user_id: int, habit_id: str | None = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π.
    –ï—Å–ª–∏ habit_id = None ‚Äî —Å–µ—Ä–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–∏–≤—ã—á–∫–∞–º (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å).
    """
    today = datetime.now(KZ_TZ).date()
    if habit_id:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å done=True –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ
        cursor = col_records.find({"habit_id": habit_id, "done": True}).sort("date", -1)
        dates = [r["date"] async for r in cursor]
        date_set = set(dates)
        streak = 0
        while True:
            d = (today - timedelta(days=streak)).isoformat()
            if d in date_set:
                streak += 1
            else:
                break
        return streak
    else:
        # –ü–æ –≤—Å–µ–º –ø—Ä–∏–≤—ã—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –¥–µ–Ω—å¬ª
        habits = await get_habits(user_id)
        ids = [str(h["_id"]) for h in habits]
        cursor = col_records.find({"habit_id": {"$in": ids}, "done": True})
        dates = {r["date"] async for r in cursor}
        streak = 0
        while True:
            d = (today - timedelta(days=streak)).isoformat()
            if d in dates:
                streak += 1
            else:
                break
        return streak


# ================= HANDLERS =================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    welcome_text = (
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìã –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏\n"
        "‚Ä¢ ‚úÖ –û—Ç–º–µ—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu())


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    help_text = (
        "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "**üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏** ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "**‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É** ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "**‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "**üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É** ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –Ω–∞—á–Ω–∏—Ç–µ —Å 3‚Äì5 –ø—Ä–∏–≤—ã—á–µ–∫."
    )
    await message.answer(help_text, reply_markup=get_main_menu())


@dp.message(F.text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def list_habits_cmd(message: types.Message):
    habits_today = await get_today_progress(message.from_user.id)
    if not habits_today:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!", reply_markup=get_main_menu())
        return

    today = datetime.now(KZ_TZ).strftime("%d.%m.%Y")
    text = f"üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ {today}:**\n\n"

    completed = 0
    for _, name, color, done in habits_today:
        status = "‚úÖ" if done else "‚è≥"
        text += f"{color} {name} ‚Äî {status}\n"
        if done:
            completed += 1

    total = len(habits_today)
    percentage = (completed / total) * 100 if total > 0 else 0
    text += f"\nüéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {completed}/{total} ({percentage:.1f}%)"

    streak = await get_streak(message.from_user.id)
    if streak > 0:
        text += f"\nüî• **–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:** {streak} –¥–Ω."

    await message.answer(text, reply_markup=get_main_menu())


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def add_habit_cmd(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –ß—Ç–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(HabitStates.waiting_for_habit_name)


@dp.message(HabitStates.waiting_for_habit_name)
async def process_habit_name(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return

    habit_name = (message.text or "").strip()
    if not habit_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (1‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    if len(habit_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await add_habit(message.from_user.id, habit_name)
    await state.clear()
    await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())


@dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def mark_done_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!", reply_markup=get_main_menu())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=get_habits_keyboard(habits, "mark"))


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def delete_habit_cmd(message: types.Message):
    habits = await get_habits(message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_habits_keyboard(habits, "delete"))


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_cmd(message: types.Message):
    stats = await get_stats(message.from_user.id, 7)
    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏!", reply_markup=get_main_menu())
        return

    text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:**\n\n"
    total_done = 0
    for name, color, done_count in stats:
        text += f"{color} {name}: {done_count} —Ä–∞–∑\n"
        total_done += done_count

    streak = await get_streak(message.from_user.id)
    text += f"\nüî• **–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:** {streak} –¥–Ω."
    text += f"\nüéØ **–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {total_done} —Ä–∞–∑"

    await message.answer(text, reply_markup=get_main_menu())


# ================= CALLBACKS =================
@dp.callback_query(F.data.startswith("mark_"))
async def mark_habit_callback(callback: types.CallbackQuery):
    habit_id = callback.data.split("_", 1)[1]
    await mark_done(habit_id, True)
    h = await col_habits.find_one({"_id": ObjectId(habit_id)})
    habit_name = (h or {}).get("name", "–ü—Ä–∏–≤—ã—á–∫–∞")
    await callback.message.edit_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_"))
async def delete_habit_callback(callback: types.CallbackQuery):
    habit_id = callback.data.split("_", 1)[1]
    h = await col_habits.find_one({"_id": ObjectId(habit_id)})
    habit_name = (h or {}).get("name", "–ü—Ä–∏–≤—ã—á–∫–∞")
    await delete_habit(habit_id, callback.from_user.id)
    await callback.message.edit_text(f"üóë –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit_name}¬ª —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()


@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


# ================= REMINDERS =================
async def send_reminders():
    # –Ω–∞–π–¥—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏
    users = await col_habits.distinct("user_id")
    for user_id in users:
        try:
            today_progress = await get_today_progress(user_id)
            unmarked = [h for h in today_progress if not h[3]]
            if unmarked:
                reminder_text = "üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                for habit in unmarked[:5]:
                    _, name, color, _ = habit
                    reminder_text += f"‚Ä¢ {color} {name}\n"
                if len(unmarked) > 5:
                    reminder_text += f"‚Ä¢ ... –∏ –µ—â—ë {len(unmarked) - 5} –ø—Ä–∏–≤—ã—á–µ–∫\n"
                reminder_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª"
                await bot.send_message(user_id, reminder_text, reply_markup=get_main_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def setup_scheduler():
    scheduler.add_job(
        send_reminders,
        CronTrigger(hour=20, minute=0),
        id="reminder_20_00",
        replace_existing=True,
        coalesce=True,
        misfire_grace_time=300
    )
    scheduler.add_job(
        send_reminders,
        CronTrigger(hour=9, minute=0),
        id="reminder_09_00",
        replace_existing=True,
        coalesce=True,
        misfire_grace_time=300
    )
    scheduler.start()


# ================= SHUTDOWN =================
async def on_shutdown():
    try:
        scheduler.shutdown(wait=False)
    except Exception:
        pass
    try:
        await bot.session.close()
    except Exception:
        pass
    try:
        mongo_client.close()
    except Exception:
        pass
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# ================= MAIN =================
async def main():
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª webhook
    await bot.delete_webhook(drop_pending_updates=True)

    await create_indexes()
    setup_scheduler()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await on_shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
